<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Labyrinthe avec Entrée et Sortie</title>
  <style>
    canvas {
      border: 1px solid black;
      display: block;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <canvas id="mazeCanvas" width="1000" height="700"></canvas>

  <script>
    const canvas = document.getElementById('mazeCanvas');
    const ctx = canvas.getContext('2d');
    
    const cols = 13;  // Nombre de colonnes
    const rows = 9;  // Nombre de lignes
    const cellSize = 80;  // Taille de chaque cellule du labyrinthe

    // Création d'une matrice représentant le labyrinthe
    const maze = [];
    for (let i = 0; i < rows; i++) {
      maze[i] = [];
      for (let j = 0; j < cols; j++) {
        maze[i][j] = 1;  // 1 représente un mur par défaut
      }
    }

    // Fonction pour dessiner le labyrinthe
    function drawMaze() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);  // Effacer le canevas

      for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {
          if (maze[i][j] === 1) {
            // Dessiner un mur
            ctx.fillStyle = '#9ba39d';
            ctx.fillRect(j * cellSize, i * cellSize, cellSize, cellSize);
          } else if (maze[i][j] === 2) {
            // Dessiner l'entrée (couleur verte)
            ctx.fillStyle = 'white';
            ctx.fillRect(j * cellSize, i * cellSize, cellSize, cellSize);
          } else if (maze[i][j] === 3) {
            // Dessiner la sortie (couleur rouge)
            ctx.fillStyle = 'white';
            ctx.fillRect(j * cellSize, i * cellSize, cellSize, cellSize);
          } else {
            // Dessiner un chemin
            ctx.fillStyle = 'white';
            ctx.fillRect(j * cellSize, i * cellSize, cellSize, cellSize);
          }
        }
      }
    }

    // Fonction pour générer un labyrinthe simple (algorithme de backtracking)
    function generateMaze() {
      const visited = [];
      for (let i = 0; i < rows; i++) {
        visited[i] = [];
        for (let j = 0; j < cols; j++) {
          visited[i][j] = false;
        }
      }

      // Fonction récursive pour dessiner un chemin
      function carveMaze(x, y) {
        visited[y][x] = true;
        maze[y][x] = 0;  // Marquer comme un chemin libre

        const directions = [
          {dx: 0, dy: -2},  // Haut
          {dx: 2, dy: 0},   // Droite
          {dx: 0, dy: 2},   // Bas
          {dx: -2, dy: 0}   // Gauche
        ];
        
        // Mélanger les directions pour créer des labyrinthes différents
        directions.sort(() => Math.random() - 0.5);

        for (const dir of directions) {
          const nx = x + dir.dx;
          const ny = y + dir.dy;

          if (nx >= 0 && ny >= 0 && nx < cols && ny < rows && !visited[ny][nx]) {
            // Créer un chemin entre la cellule actuelle et la nouvelle
            maze[y + dir.dy / 2][x + dir.dx / 2] = 0;  // Enlever les murs entre
            carveMaze(nx, ny);
          }
        }		
      }

      // Débuter à la cellule (1, 1)
      carveMaze(1, 1);
      
      // Ajouter l'entrée : placez l'entrée sur le mur de gauche (colonne 0)
	  let entranceRow = Math.floor(Math.random() * rows);  // Position de l'entrée
	  
	  entranceRow = ((entranceRow === 0) ? entranceRow = entranceRow+1 :  entranceRow = entranceRow) ;
	  entranceRow = ((entranceRow === rows-1) ? entranceRow = entranceRow-2 :  entranceRow = entranceRow) ;

      maze[entranceRow][0] = 2;  // Marquer l'entrée (vert)
	  
	  let i = 1;
	  while (maze[entranceRow][i] === 1) {
		maze[entranceRow][i] = 0;
		i = i + 1;
	  }

      // Ajouter la sortie : placez la sortie en bas à droite
      maze[rows - 1][cols - 2] = 3;  // Marquer la sortie (rouge)
	  
	  
      
      // Dessiner le labyrinthe avec l'entrée et la sortie
      drawMaze();
    }

    // Générer le labyrinthe et l'afficher
    generateMaze();
  </script>
</body>
</html>
